package com.fidoarp.catalog.service.base;

import com.fidoarp.catalog.model.ProductType;
import com.fidoarp.catalog.service.AppLocalService;
import com.fidoarp.catalog.service.AppStatusLocalService;
import com.fidoarp.catalog.service.DictionaryLocalService;
import com.fidoarp.catalog.service.FidoBranchLocalService;
import com.fidoarp.catalog.service.ProductTypeLocalService;
import com.fidoarp.catalog.service.persistence.AppPersistence;
import com.fidoarp.catalog.service.persistence.AppStatusPersistence;
import com.fidoarp.catalog.service.persistence.DictionaryPersistence;
import com.fidoarp.catalog.service.persistence.FidoBranchPersistence;
import com.fidoarp.catalog.service.persistence.ProductTypePersistence;

import com.liferay.counter.service.CounterLocalService;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.OrganizationLocalService;
import com.liferay.portal.service.OrganizationService;
import com.liferay.portal.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.service.ResourceLocalService;
import com.liferay.portal.service.ResourceService;
import com.liferay.portal.service.UserLocalService;
import com.liferay.portal.service.UserService;
import com.liferay.portal.service.persistence.OrganizationPersistence;
import com.liferay.portal.service.persistence.ResourcePersistence;
import com.liferay.portal.service.persistence.UserPersistence;

import com.liferay.portlet.dynamicdatamapping.service.DDMTemplateLocalService;
import com.liferay.portlet.dynamicdatamapping.service.DDMTemplateService;
import com.liferay.portlet.dynamicdatamapping.service.persistence.DDMTemplatePersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * The base implementation of the product type local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.fidoarp.catalog.service.impl.ProductTypeLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.fidoarp.catalog.service.impl.ProductTypeLocalServiceImpl
 * @see com.fidoarp.catalog.service.ProductTypeLocalServiceUtil
 * @generated
 */
public abstract class ProductTypeLocalServiceBaseImpl
    extends BaseLocalServiceImpl implements ProductTypeLocalService,
        IdentifiableBean {
    @BeanReference(type = AppLocalService.class)
    protected AppLocalService appLocalService;
    @BeanReference(type = AppPersistence.class)
    protected AppPersistence appPersistence;
    @BeanReference(type = AppStatusLocalService.class)
    protected AppStatusLocalService appStatusLocalService;
    @BeanReference(type = AppStatusPersistence.class)
    protected AppStatusPersistence appStatusPersistence;
    @BeanReference(type = DictionaryLocalService.class)
    protected DictionaryLocalService dictionaryLocalService;
    @BeanReference(type = DictionaryPersistence.class)
    protected DictionaryPersistence dictionaryPersistence;
    @BeanReference(type = FidoBranchLocalService.class)
    protected FidoBranchLocalService fidoBranchLocalService;
    @BeanReference(type = FidoBranchPersistence.class)
    protected FidoBranchPersistence fidoBranchPersistence;
    @BeanReference(type = ProductTypeLocalService.class)
    protected ProductTypeLocalService productTypeLocalService;
    @BeanReference(type = ProductTypePersistence.class)
    protected ProductTypePersistence productTypePersistence;
    @BeanReference(type = CounterLocalService.class)
    protected CounterLocalService counterLocalService;
    @BeanReference(type = OrganizationLocalService.class)
    protected OrganizationLocalService organizationLocalService;
    @BeanReference(type = OrganizationService.class)
    protected OrganizationService organizationService;
    @BeanReference(type = OrganizationPersistence.class)
    protected OrganizationPersistence organizationPersistence;
    @BeanReference(type = ResourceLocalService.class)
    protected ResourceLocalService resourceLocalService;
    @BeanReference(type = ResourceService.class)
    protected ResourceService resourceService;
    @BeanReference(type = ResourcePersistence.class)
    protected ResourcePersistence resourcePersistence;
    @BeanReference(type = UserLocalService.class)
    protected UserLocalService userLocalService;
    @BeanReference(type = UserService.class)
    protected UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    @BeanReference(type = DDMTemplateLocalService.class)
    protected DDMTemplateLocalService ddmTemplateLocalService;
    @BeanReference(type = DDMTemplateService.class)
    protected DDMTemplateService ddmTemplateService;
    @BeanReference(type = DDMTemplatePersistence.class)
    protected DDMTemplatePersistence ddmTemplatePersistence;
    @BeanReference(type = PersistedModelLocalServiceRegistry.class)
    protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
    private String _beanIdentifier;

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link com.fidoarp.catalog.service.ProductTypeLocalServiceUtil} to access the product type local service.
     */

    /**
     * Adds the product type to the database. Also notifies the appropriate model listeners.
     *
     * @param productType the product type
     * @return the product type that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    public ProductType addProductType(ProductType productType)
        throws SystemException {
        productType.setNew(true);

        return productTypePersistence.update(productType, false);
    }

    /**
     * Creates a new product type with the primary key. Does not add the product type to the database.
     *
     * @param productTypeId the primary key for the new product type
     * @return the new product type
     */
    public ProductType createProductType(long productTypeId) {
        return productTypePersistence.create(productTypeId);
    }

    /**
     * Deletes the product type with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param productTypeId the primary key of the product type
     * @return the product type that was removed
     * @throws PortalException if a product type with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    public ProductType deleteProductType(long productTypeId)
        throws PortalException, SystemException {
        return productTypePersistence.remove(productTypeId);
    }

    /**
     * Deletes the product type from the database. Also notifies the appropriate model listeners.
     *
     * @param productType the product type
     * @return the product type that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    public ProductType deleteProductType(ProductType productType)
        throws SystemException {
        return productTypePersistence.remove(productType);
    }

    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(ProductType.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return productTypePersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return productTypePersistence.findWithDynamicQuery(dynamicQuery, start,
            end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return productTypePersistence.findWithDynamicQuery(dynamicQuery, start,
            end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return productTypePersistence.countWithDynamicQuery(dynamicQuery);
    }

    public ProductType fetchProductType(long productTypeId)
        throws SystemException {
        return productTypePersistence.fetchByPrimaryKey(productTypeId);
    }

    /**
     * Returns the product type with the primary key.
     *
     * @param productTypeId the primary key of the product type
     * @return the product type
     * @throws PortalException if a product type with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    public ProductType getProductType(long productTypeId)
        throws PortalException, SystemException {
        return productTypePersistence.findByPrimaryKey(productTypeId);
    }

    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return productTypePersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the product types.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
     * </p>
     *
     * @param start the lower bound of the range of product types
     * @param end the upper bound of the range of product types (not inclusive)
     * @return the range of product types
     * @throws SystemException if a system exception occurred
     */
    public List<ProductType> getProductTypes(int start, int end)
        throws SystemException {
        return productTypePersistence.findAll(start, end);
    }

    /**
     * Returns the number of product types.
     *
     * @return the number of product types
     * @throws SystemException if a system exception occurred
     */
    public int getProductTypesCount() throws SystemException {
        return productTypePersistence.countAll();
    }

    /**
     * Updates the product type in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param productType the product type
     * @return the product type that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    public ProductType updateProductType(ProductType productType)
        throws SystemException {
        return updateProductType(productType, true);
    }

    /**
     * Updates the product type in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param productType the product type
     * @param merge whether to merge the product type with the current session. See {@link com.liferay.portal.service.persistence.BatchSession#update(com.liferay.portal.kernel.dao.orm.Session, com.liferay.portal.model.BaseModel, boolean)} for an explanation.
     * @return the product type that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    public ProductType updateProductType(ProductType productType, boolean merge)
        throws SystemException {
        productType.setNew(false);

        return productTypePersistence.update(productType, merge);
    }

    /**
     * Returns the app local service.
     *
     * @return the app local service
     */
    public AppLocalService getAppLocalService() {
        return appLocalService;
    }

    /**
     * Sets the app local service.
     *
     * @param appLocalService the app local service
     */
    public void setAppLocalService(AppLocalService appLocalService) {
        this.appLocalService = appLocalService;
    }

    /**
     * Returns the app persistence.
     *
     * @return the app persistence
     */
    public AppPersistence getAppPersistence() {
        return appPersistence;
    }

    /**
     * Sets the app persistence.
     *
     * @param appPersistence the app persistence
     */
    public void setAppPersistence(AppPersistence appPersistence) {
        this.appPersistence = appPersistence;
    }

    /**
     * Returns the app status local service.
     *
     * @return the app status local service
     */
    public AppStatusLocalService getAppStatusLocalService() {
        return appStatusLocalService;
    }

    /**
     * Sets the app status local service.
     *
     * @param appStatusLocalService the app status local service
     */
    public void setAppStatusLocalService(
        AppStatusLocalService appStatusLocalService) {
        this.appStatusLocalService = appStatusLocalService;
    }

    /**
     * Returns the app status persistence.
     *
     * @return the app status persistence
     */
    public AppStatusPersistence getAppStatusPersistence() {
        return appStatusPersistence;
    }

    /**
     * Sets the app status persistence.
     *
     * @param appStatusPersistence the app status persistence
     */
    public void setAppStatusPersistence(
        AppStatusPersistence appStatusPersistence) {
        this.appStatusPersistence = appStatusPersistence;
    }

    /**
     * Returns the dictionary local service.
     *
     * @return the dictionary local service
     */
    public DictionaryLocalService getDictionaryLocalService() {
        return dictionaryLocalService;
    }

    /**
     * Sets the dictionary local service.
     *
     * @param dictionaryLocalService the dictionary local service
     */
    public void setDictionaryLocalService(
        DictionaryLocalService dictionaryLocalService) {
        this.dictionaryLocalService = dictionaryLocalService;
    }

    /**
     * Returns the dictionary persistence.
     *
     * @return the dictionary persistence
     */
    public DictionaryPersistence getDictionaryPersistence() {
        return dictionaryPersistence;
    }

    /**
     * Sets the dictionary persistence.
     *
     * @param dictionaryPersistence the dictionary persistence
     */
    public void setDictionaryPersistence(
        DictionaryPersistence dictionaryPersistence) {
        this.dictionaryPersistence = dictionaryPersistence;
    }

    /**
     * Returns the fido branch local service.
     *
     * @return the fido branch local service
     */
    public FidoBranchLocalService getFidoBranchLocalService() {
        return fidoBranchLocalService;
    }

    /**
     * Sets the fido branch local service.
     *
     * @param fidoBranchLocalService the fido branch local service
     */
    public void setFidoBranchLocalService(
        FidoBranchLocalService fidoBranchLocalService) {
        this.fidoBranchLocalService = fidoBranchLocalService;
    }

    /**
     * Returns the fido branch persistence.
     *
     * @return the fido branch persistence
     */
    public FidoBranchPersistence getFidoBranchPersistence() {
        return fidoBranchPersistence;
    }

    /**
     * Sets the fido branch persistence.
     *
     * @param fidoBranchPersistence the fido branch persistence
     */
    public void setFidoBranchPersistence(
        FidoBranchPersistence fidoBranchPersistence) {
        this.fidoBranchPersistence = fidoBranchPersistence;
    }

    /**
     * Returns the product type local service.
     *
     * @return the product type local service
     */
    public ProductTypeLocalService getProductTypeLocalService() {
        return productTypeLocalService;
    }

    /**
     * Sets the product type local service.
     *
     * @param productTypeLocalService the product type local service
     */
    public void setProductTypeLocalService(
        ProductTypeLocalService productTypeLocalService) {
        this.productTypeLocalService = productTypeLocalService;
    }

    /**
     * Returns the product type persistence.
     *
     * @return the product type persistence
     */
    public ProductTypePersistence getProductTypePersistence() {
        return productTypePersistence;
    }

    /**
     * Sets the product type persistence.
     *
     * @param productTypePersistence the product type persistence
     */
    public void setProductTypePersistence(
        ProductTypePersistence productTypePersistence) {
        this.productTypePersistence = productTypePersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the organization local service.
     *
     * @return the organization local service
     */
    public OrganizationLocalService getOrganizationLocalService() {
        return organizationLocalService;
    }

    /**
     * Sets the organization local service.
     *
     * @param organizationLocalService the organization local service
     */
    public void setOrganizationLocalService(
        OrganizationLocalService organizationLocalService) {
        this.organizationLocalService = organizationLocalService;
    }

    /**
     * Returns the organization remote service.
     *
     * @return the organization remote service
     */
    public OrganizationService getOrganizationService() {
        return organizationService;
    }

    /**
     * Sets the organization remote service.
     *
     * @param organizationService the organization remote service
     */
    public void setOrganizationService(OrganizationService organizationService) {
        this.organizationService = organizationService;
    }

    /**
     * Returns the organization persistence.
     *
     * @return the organization persistence
     */
    public OrganizationPersistence getOrganizationPersistence() {
        return organizationPersistence;
    }

    /**
     * Sets the organization persistence.
     *
     * @param organizationPersistence the organization persistence
     */
    public void setOrganizationPersistence(
        OrganizationPersistence organizationPersistence) {
        this.organizationPersistence = organizationPersistence;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the resource remote service.
     *
     * @return the resource remote service
     */
    public ResourceService getResourceService() {
        return resourceService;
    }

    /**
     * Sets the resource remote service.
     *
     * @param resourceService the resource remote service
     */
    public void setResourceService(ResourceService resourceService) {
        this.resourceService = resourceService;
    }

    /**
     * Returns the resource persistence.
     *
     * @return the resource persistence
     */
    public ResourcePersistence getResourcePersistence() {
        return resourcePersistence;
    }

    /**
     * Sets the resource persistence.
     *
     * @param resourcePersistence the resource persistence
     */
    public void setResourcePersistence(ResourcePersistence resourcePersistence) {
        this.resourcePersistence = resourcePersistence;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    /**
     * Returns the d d m template local service.
     *
     * @return the d d m template local service
     */
    public DDMTemplateLocalService getDDMTemplateLocalService() {
        return ddmTemplateLocalService;
    }

    /**
     * Sets the d d m template local service.
     *
     * @param ddmTemplateLocalService the d d m template local service
     */
    public void setDDMTemplateLocalService(
        DDMTemplateLocalService ddmTemplateLocalService) {
        this.ddmTemplateLocalService = ddmTemplateLocalService;
    }

    /**
     * Returns the d d m template remote service.
     *
     * @return the d d m template remote service
     */
    public DDMTemplateService getDDMTemplateService() {
        return ddmTemplateService;
    }

    /**
     * Sets the d d m template remote service.
     *
     * @param ddmTemplateService the d d m template remote service
     */
    public void setDDMTemplateService(DDMTemplateService ddmTemplateService) {
        this.ddmTemplateService = ddmTemplateService;
    }

    /**
     * Returns the d d m template persistence.
     *
     * @return the d d m template persistence
     */
    public DDMTemplatePersistence getDDMTemplatePersistence() {
        return ddmTemplatePersistence;
    }

    /**
     * Sets the d d m template persistence.
     *
     * @param ddmTemplatePersistence the d d m template persistence
     */
    public void setDDMTemplatePersistence(
        DDMTemplatePersistence ddmTemplatePersistence) {
        this.ddmTemplatePersistence = ddmTemplatePersistence;
    }

    public void afterPropertiesSet() {
        persistedModelLocalServiceRegistry.register("com.fidoarp.catalog.model.ProductType",
            productTypeLocalService);
    }

    public void destroy() {
        persistedModelLocalServiceRegistry.unregister(
            "com.fidoarp.catalog.model.ProductType");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    protected Class<?> getModelClass() {
        return ProductType.class;
    }

    protected String getModelClassName() {
        return ProductType.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = productTypePersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
